===== Terminals =====
[0]EOF [1]error [2]PROGRAM [3]CLASS [4]METHOD 
[5]ATTR [6]FORMAL [7]BRANCH [8]ASSIGN [9]STATIC_DISPATCH 
[10]DISPATCH [11]LPAREN [12]RPAREN [13]COLON [14]COND 
[15]LOOP [16]TYPCASE [17]BLOCK [18]LET [19]PLUS 
[20]SUB [21]MUL [22]DIVIDE [23]NEG [24]LT 
[25]EQ [26]LEQ [27]COMP [28]INT [29]STR 
[30]BOOL [31]NEW [32]ISVOID [33]NO_EXPR [34]OBJECT 
[35]NO_TYPE [36]STR_CONST [37]INT_CONST [38]ID [39]LINENO 


===== Non terminals =====
[0]program [1]class_list [2]class [3]feature_list [4]optional_feature_list 
[5]feature [6]formals [7]formal_list [8]formal [9]expr_aux 
[10]expr [11]actuals [12]expr_list [13]case_list [14]simple_case 


===== Productions =====
[0] program ::= LINENO PROGRAM class_list 
[1] $START ::= program EOF 
[2] program ::= 
[3] class_list ::= class 
[4] class_list ::= class_list class 
[5] class ::= LINENO CLASS ID ID STR_CONST LPAREN optional_feature_list RPAREN 
[6] optional_feature_list ::= 
[7] optional_feature_list ::= feature_list 
[8] feature_list ::= feature 
[9] feature_list ::= feature_list feature 
[10] feature ::= LINENO METHOD ID formals ID expr 
[11] feature ::= LINENO ATTR ID ID expr 
[12] formals ::= 
[13] formals ::= formal_list 
[14] formal_list ::= formal 
[15] formal_list ::= formal_list formal 
[16] formal ::= LINENO FORMAL ID ID 
[17] expr ::= expr_aux COLON ID 
[18] expr ::= expr_aux COLON NO_TYPE 
[19] expr_aux ::= LINENO ASSIGN ID expr 
[20] expr_aux ::= LINENO STATIC_DISPATCH expr ID ID actuals 
[21] expr_aux ::= LINENO DISPATCH expr ID actuals 
[22] expr_aux ::= LINENO COND expr expr expr 
[23] expr_aux ::= LINENO LOOP expr expr 
[24] expr_aux ::= LINENO BLOCK expr_list 
[25] expr_aux ::= LINENO LET ID ID expr expr 
[26] expr_aux ::= LINENO TYPCASE expr case_list 
[27] expr_aux ::= LINENO NEW ID 
[28] expr_aux ::= LINENO ISVOID expr 
[29] expr_aux ::= LINENO PLUS expr expr 
[30] expr_aux ::= LINENO SUB expr expr 
[31] expr_aux ::= LINENO MUL expr expr 
[32] expr_aux ::= LINENO DIVIDE expr expr 
[33] expr_aux ::= LINENO NEG expr 
[34] expr_aux ::= LINENO LT expr expr 
[35] expr_aux ::= LINENO EQ expr expr 
[36] expr_aux ::= LINENO LEQ expr expr 
[37] expr_aux ::= LINENO COMP expr 
[38] expr_aux ::= LINENO INT INT_CONST 
[39] expr_aux ::= LINENO STR STR_CONST 
[40] expr_aux ::= LINENO BOOL INT_CONST 
[41] expr_aux ::= LINENO OBJECT ID 
[42] expr_aux ::= LINENO NO_EXPR 
[43] actuals ::= LPAREN RPAREN 
[44] actuals ::= LPAREN expr_list RPAREN 
[45] expr_list ::= expr 
[46] expr_list ::= expr_list expr 
[47] case_list ::= simple_case 
[48] case_list ::= case_list simple_case 
[49] simple_case ::= LINENO BRANCH ID ID expr 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [program ::= (*) , {EOF }]
  [$START ::= (*) program EOF , {EOF }]
  [program ::= (*) LINENO PROGRAM class_list , {EOF }]
}
transition on LINENO to state [2]
transition on program to state [1]

-------------------
lalr_state [1]: {
  [$START ::= program (*) EOF , {EOF }]
}
transition on EOF to state [120]

-------------------
lalr_state [2]: {
  [program ::= LINENO (*) PROGRAM class_list , {EOF }]
}
transition on PROGRAM to state [3]

-------------------
lalr_state [3]: {
  [class ::= (*) LINENO CLASS ID ID STR_CONST LPAREN optional_feature_list RPAREN , {EOF LINENO }]
  [class_list ::= (*) class_list class , {EOF LINENO }]
  [program ::= LINENO PROGRAM (*) class_list , {EOF }]
  [class_list ::= (*) class , {EOF LINENO }]
}
transition on LINENO to state [6]
transition on class to state [5]
transition on class_list to state [4]

-------------------
lalr_state [4]: {
  [class ::= (*) LINENO CLASS ID ID STR_CONST LPAREN optional_feature_list RPAREN , {EOF LINENO }]
  [class_list ::= class_list (*) class , {EOF LINENO }]
  [program ::= LINENO PROGRAM class_list (*) , {EOF }]
}
transition on LINENO to state [6]
transition on class to state [119]

-------------------
lalr_state [5]: {
  [class_list ::= class (*) , {EOF LINENO }]
}

-------------------
lalr_state [6]: {
  [class ::= LINENO (*) CLASS ID ID STR_CONST LPAREN optional_feature_list RPAREN , {EOF LINENO }]
}
transition on CLASS to state [7]

-------------------
lalr_state [7]: {
  [class ::= LINENO CLASS (*) ID ID STR_CONST LPAREN optional_feature_list RPAREN , {EOF LINENO }]
}
transition on ID to state [8]

-------------------
lalr_state [8]: {
  [class ::= LINENO CLASS ID (*) ID STR_CONST LPAREN optional_feature_list RPAREN , {EOF LINENO }]
}
transition on ID to state [9]

-------------------
lalr_state [9]: {
  [class ::= LINENO CLASS ID ID (*) STR_CONST LPAREN optional_feature_list RPAREN , {EOF LINENO }]
}
transition on STR_CONST to state [10]

-------------------
lalr_state [10]: {
  [class ::= LINENO CLASS ID ID STR_CONST (*) LPAREN optional_feature_list RPAREN , {EOF LINENO }]
}
transition on LPAREN to state [11]

-------------------
lalr_state [11]: {
  [feature_list ::= (*) feature , {RPAREN LINENO }]
  [feature ::= (*) LINENO METHOD ID formals ID expr , {RPAREN LINENO }]
  [optional_feature_list ::= (*) feature_list , {RPAREN }]
  [class ::= LINENO CLASS ID ID STR_CONST LPAREN (*) optional_feature_list RPAREN , {EOF LINENO }]
  [feature_list ::= (*) feature_list feature , {RPAREN LINENO }]
  [optional_feature_list ::= (*) , {RPAREN }]
  [feature ::= (*) LINENO ATTR ID ID expr , {RPAREN LINENO }]
}
transition on LINENO to state [15]
transition on feature_list to state [14]
transition on optional_feature_list to state [13]
transition on feature to state [12]

-------------------
lalr_state [12]: {
  [feature_list ::= feature (*) , {RPAREN LINENO }]
}

-------------------
lalr_state [13]: {
  [class ::= LINENO CLASS ID ID STR_CONST LPAREN optional_feature_list (*) RPAREN , {EOF LINENO }]
}
transition on RPAREN to state [118]

-------------------
lalr_state [14]: {
  [feature ::= (*) LINENO METHOD ID formals ID expr , {RPAREN LINENO }]
  [optional_feature_list ::= feature_list (*) , {RPAREN }]
  [feature_list ::= feature_list (*) feature , {RPAREN LINENO }]
  [feature ::= (*) LINENO ATTR ID ID expr , {RPAREN LINENO }]
}
transition on LINENO to state [15]
transition on feature to state [117]

-------------------
lalr_state [15]: {
  [feature ::= LINENO (*) METHOD ID formals ID expr , {RPAREN LINENO }]
  [feature ::= LINENO (*) ATTR ID ID expr , {RPAREN LINENO }]
}
transition on METHOD to state [17]
transition on ATTR to state [16]

-------------------
lalr_state [16]: {
  [feature ::= LINENO ATTR (*) ID ID expr , {RPAREN LINENO }]
}
transition on ID to state [114]

-------------------
lalr_state [17]: {
  [feature ::= LINENO METHOD (*) ID formals ID expr , {RPAREN LINENO }]
}
transition on ID to state [18]

-------------------
lalr_state [18]: {
  [feature ::= LINENO METHOD ID (*) formals ID expr , {RPAREN LINENO }]
  [formal ::= (*) LINENO FORMAL ID ID , {ID LINENO }]
  [formals ::= (*) formal_list , {ID }]
  [formal_list ::= (*) formal_list formal , {ID LINENO }]
  [formals ::= (*) , {ID }]
  [formal_list ::= (*) formal , {ID LINENO }]
}
transition on LINENO to state [22]
transition on formals to state [21]
transition on formal to state [20]
transition on formal_list to state [19]

-------------------
lalr_state [19]: {
  [formal ::= (*) LINENO FORMAL ID ID , {ID LINENO }]
  [formals ::= formal_list (*) , {ID }]
  [formal_list ::= formal_list (*) formal , {ID LINENO }]
}
transition on LINENO to state [22]
transition on formal to state [113]

-------------------
lalr_state [20]: {
  [formal_list ::= formal (*) , {ID LINENO }]
}

-------------------
lalr_state [21]: {
  [feature ::= LINENO METHOD ID formals (*) ID expr , {RPAREN LINENO }]
}
transition on ID to state [26]

-------------------
lalr_state [22]: {
  [formal ::= LINENO (*) FORMAL ID ID , {ID LINENO }]
}
transition on FORMAL to state [23]

-------------------
lalr_state [23]: {
  [formal ::= LINENO FORMAL (*) ID ID , {ID LINENO }]
}
transition on ID to state [24]

-------------------
lalr_state [24]: {
  [formal ::= LINENO FORMAL ID (*) ID , {ID LINENO }]
}
transition on ID to state [25]

-------------------
lalr_state [25]: {
  [formal ::= LINENO FORMAL ID ID (*) , {ID LINENO }]
}

-------------------
lalr_state [26]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {RPAREN LINENO }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {RPAREN LINENO }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [feature ::= LINENO METHOD ID formals ID (*) expr , {RPAREN LINENO }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [28]
transition on LINENO to state [27]

-------------------
lalr_state [27]: {
  [expr_aux ::= LINENO (*) STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= LINENO (*) LET ID ID expr expr , {COLON }]
  [expr_aux ::= LINENO (*) SUB expr expr , {COLON }]
  [expr_aux ::= LINENO (*) EQ expr expr , {COLON }]
  [expr_aux ::= LINENO (*) BOOL INT_CONST , {COLON }]
  [expr_aux ::= LINENO (*) LOOP expr expr , {COLON }]
  [expr_aux ::= LINENO (*) ISVOID expr , {COLON }]
  [expr_aux ::= LINENO (*) NEG expr , {COLON }]
  [expr_aux ::= LINENO (*) INT INT_CONST , {COLON }]
  [expr_aux ::= LINENO (*) DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= LINENO (*) TYPCASE expr case_list , {COLON }]
  [expr_aux ::= LINENO (*) MUL expr expr , {COLON }]
  [expr_aux ::= LINENO (*) LEQ expr expr , {COLON }]
  [expr_aux ::= LINENO (*) OBJECT ID , {COLON }]
  [expr_aux ::= LINENO (*) ASSIGN ID expr , {COLON }]
  [expr_aux ::= LINENO (*) BLOCK expr_list , {COLON }]
  [expr_aux ::= LINENO (*) PLUS expr expr , {COLON }]
  [expr_aux ::= LINENO (*) LT expr expr , {COLON }]
  [expr_aux ::= LINENO (*) STR STR_CONST , {COLON }]
  [expr_aux ::= LINENO (*) COND expr expr expr , {COLON }]
  [expr_aux ::= LINENO (*) NEW ID , {COLON }]
  [expr_aux ::= LINENO (*) DIVIDE expr expr , {COLON }]
  [expr_aux ::= LINENO (*) COMP expr , {COLON }]
  [expr_aux ::= LINENO (*) NO_EXPR , {COLON }]
}
transition on BLOCK to state [56]
transition on MUL to state [55]
transition on ISVOID to state [54]
transition on BOOL to state [53]
transition on LEQ to state [52]
transition on COND to state [51]
transition on NEW to state [50]
transition on EQ to state [49]
transition on ASSIGN to state [48]
transition on STR to state [47]
transition on LET to state [46]
transition on STATIC_DISPATCH to state [45]
transition on DISPATCH to state [44]
transition on DIVIDE to state [43]
transition on NO_EXPR to state [42]
transition on TYPCASE to state [41]
transition on OBJECT to state [40]
transition on SUB to state [39]
transition on LOOP to state [38]
transition on COMP to state [37]
transition on INT to state [36]
transition on PLUS to state [35]
transition on NEG to state [34]
transition on LT to state [33]

-------------------
lalr_state [28]: {
  [feature ::= LINENO METHOD ID formals ID expr (*) , {RPAREN LINENO }]
}

-------------------
lalr_state [29]: {
  [expr ::= expr_aux (*) COLON NO_TYPE , {RPAREN COLON ID LINENO }]
  [expr ::= expr_aux (*) COLON ID , {RPAREN COLON ID LINENO }]
}
transition on COLON to state [30]

-------------------
lalr_state [30]: {
  [expr ::= expr_aux COLON (*) NO_TYPE , {RPAREN COLON ID LINENO }]
  [expr ::= expr_aux COLON (*) ID , {RPAREN COLON ID LINENO }]
}
transition on NO_TYPE to state [32]
transition on ID to state [31]

-------------------
lalr_state [31]: {
  [expr ::= expr_aux COLON ID (*) , {RPAREN COLON ID LINENO }]
}

-------------------
lalr_state [32]: {
  [expr ::= expr_aux COLON NO_TYPE (*) , {RPAREN COLON ID LINENO }]
}

-------------------
lalr_state [33]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {LINENO }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= LINENO LT (*) expr expr , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {LINENO }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [111]
transition on LINENO to state [27]

-------------------
lalr_state [34]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {COLON }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= LINENO NEG (*) expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {COLON }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [110]
transition on LINENO to state [27]

-------------------
lalr_state [35]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {LINENO }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= LINENO PLUS (*) expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {LINENO }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [108]
transition on LINENO to state [27]

-------------------
lalr_state [36]: {
  [expr_aux ::= LINENO INT (*) INT_CONST , {COLON }]
}
transition on INT_CONST to state [107]

-------------------
lalr_state [37]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {COLON }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {COLON }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= LINENO COMP (*) expr , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [106]
transition on LINENO to state [27]

-------------------
lalr_state [38]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr_aux ::= LINENO LOOP (*) expr expr , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {LINENO }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {LINENO }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr to state [104]
transition on expr_aux to state [29]
transition on LINENO to state [27]

-------------------
lalr_state [39]: {
  [expr_aux ::= LINENO SUB (*) expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {LINENO }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {LINENO }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr to state [102]
transition on expr_aux to state [29]
transition on LINENO to state [27]

-------------------
lalr_state [40]: {
  [expr_aux ::= LINENO OBJECT (*) ID , {COLON }]
}
transition on ID to state [101]

-------------------
lalr_state [41]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {LINENO }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= LINENO TYPCASE (*) expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {LINENO }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [92]
transition on LINENO to state [27]

-------------------
lalr_state [42]: {
  [expr_aux ::= LINENO NO_EXPR (*) , {COLON }]
}

-------------------
lalr_state [43]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {LINENO }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {LINENO }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= LINENO DIVIDE (*) expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [90]
transition on LINENO to state [27]

-------------------
lalr_state [44]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {ID }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= LINENO DISPATCH (*) expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {ID }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [87]
transition on LINENO to state [27]

-------------------
lalr_state [45]: {
  [expr_aux ::= LINENO STATIC_DISPATCH (*) expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {ID }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {ID }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr to state [79]
transition on expr_aux to state [29]
transition on LINENO to state [27]

-------------------
lalr_state [46]: {
  [expr_aux ::= LINENO LET (*) ID ID expr expr , {COLON }]
}
transition on ID to state [75]

-------------------
lalr_state [47]: {
  [expr_aux ::= LINENO STR (*) STR_CONST , {COLON }]
}
transition on STR_CONST to state [74]

-------------------
lalr_state [48]: {
  [expr_aux ::= LINENO ASSIGN (*) ID expr , {COLON }]
}
transition on ID to state [72]

-------------------
lalr_state [49]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= LINENO EQ (*) expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {LINENO }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {LINENO }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr to state [70]
transition on expr_aux to state [29]
transition on LINENO to state [27]

-------------------
lalr_state [50]: {
  [expr_aux ::= LINENO NEW (*) ID , {COLON }]
}
transition on ID to state [69]

-------------------
lalr_state [51]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {LINENO }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr_aux ::= LINENO COND (*) expr expr expr , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {LINENO }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [66]
transition on LINENO to state [27]

-------------------
lalr_state [52]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {LINENO }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= LINENO LEQ (*) expr expr , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {LINENO }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [64]
transition on LINENO to state [27]

-------------------
lalr_state [53]: {
  [expr_aux ::= LINENO BOOL (*) INT_CONST , {COLON }]
}
transition on INT_CONST to state [63]

-------------------
lalr_state [54]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {COLON }]
  [expr_aux ::= LINENO ISVOID (*) expr , {COLON }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {COLON }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [62]
transition on LINENO to state [27]

-------------------
lalr_state [55]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {LINENO }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= LINENO MUL (*) expr expr , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {LINENO }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [60]
transition on LINENO to state [27]

-------------------
lalr_state [56]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr_list ::= (*) expr , {COLON LINENO }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {COLON LINENO }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_list ::= (*) expr_list expr , {COLON LINENO }]
  [expr_aux ::= LINENO BLOCK (*) expr_list , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {COLON LINENO }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr to state [58]
transition on expr_aux to state [29]
transition on expr_list to state [57]
transition on LINENO to state [27]

-------------------
lalr_state [57]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {COLON LINENO }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_list ::= expr_list (*) expr , {COLON LINENO }]
  [expr_aux ::= LINENO BLOCK expr_list (*) , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {COLON LINENO }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [59]
transition on LINENO to state [27]

-------------------
lalr_state [58]: {
  [expr_list ::= expr (*) , {RPAREN COLON LINENO }]
}

-------------------
lalr_state [59]: {
  [expr_list ::= expr_list expr (*) , {RPAREN COLON LINENO }]
}

-------------------
lalr_state [60]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {COLON }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= LINENO MUL expr (*) expr , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {COLON }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [61]
transition on LINENO to state [27]

-------------------
lalr_state [61]: {
  [expr_aux ::= LINENO MUL expr expr (*) , {COLON }]
}

-------------------
lalr_state [62]: {
  [expr_aux ::= LINENO ISVOID expr (*) , {COLON }]
}

-------------------
lalr_state [63]: {
  [expr_aux ::= LINENO BOOL INT_CONST (*) , {COLON }]
}

-------------------
lalr_state [64]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {COLON }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= LINENO LEQ expr (*) expr , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {COLON }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [65]
transition on LINENO to state [27]

-------------------
lalr_state [65]: {
  [expr_aux ::= LINENO LEQ expr expr (*) , {COLON }]
}

-------------------
lalr_state [66]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {LINENO }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr_aux ::= LINENO COND expr (*) expr expr , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {LINENO }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [67]
transition on LINENO to state [27]

-------------------
lalr_state [67]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {COLON }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr_aux ::= LINENO COND expr expr (*) expr , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {COLON }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [68]
transition on LINENO to state [27]

-------------------
lalr_state [68]: {
  [expr_aux ::= LINENO COND expr expr expr (*) , {COLON }]
}

-------------------
lalr_state [69]: {
  [expr_aux ::= LINENO NEW ID (*) , {COLON }]
}

-------------------
lalr_state [70]: {
  [expr_aux ::= LINENO EQ expr (*) expr , {COLON }]
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {COLON }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {COLON }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr to state [71]
transition on expr_aux to state [29]
transition on LINENO to state [27]

-------------------
lalr_state [71]: {
  [expr_aux ::= LINENO EQ expr expr (*) , {COLON }]
}

-------------------
lalr_state [72]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {COLON }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= LINENO ASSIGN ID (*) expr , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {COLON }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [73]
transition on LINENO to state [27]

-------------------
lalr_state [73]: {
  [expr_aux ::= LINENO ASSIGN ID expr (*) , {COLON }]
}

-------------------
lalr_state [74]: {
  [expr_aux ::= LINENO STR STR_CONST (*) , {COLON }]
}

-------------------
lalr_state [75]: {
  [expr_aux ::= LINENO LET ID (*) ID expr expr , {COLON }]
}
transition on ID to state [76]

-------------------
lalr_state [76]: {
  [expr_aux ::= LINENO LET ID ID (*) expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {LINENO }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {LINENO }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr to state [77]
transition on expr_aux to state [29]
transition on LINENO to state [27]

-------------------
lalr_state [77]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {COLON }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {COLON }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
  [expr_aux ::= LINENO LET ID ID expr (*) expr , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [78]
transition on LINENO to state [27]

-------------------
lalr_state [78]: {
  [expr_aux ::= LINENO LET ID ID expr expr (*) , {COLON }]
}

-------------------
lalr_state [79]: {
  [expr_aux ::= LINENO STATIC_DISPATCH expr (*) ID ID actuals , {COLON }]
}
transition on ID to state [80]

-------------------
lalr_state [80]: {
  [expr_aux ::= LINENO STATIC_DISPATCH expr ID (*) ID actuals , {COLON }]
}
transition on ID to state [81]

-------------------
lalr_state [81]: {
  [expr_aux ::= LINENO STATIC_DISPATCH expr ID ID (*) actuals , {COLON }]
  [actuals ::= (*) LPAREN RPAREN , {COLON }]
  [actuals ::= (*) LPAREN expr_list RPAREN , {COLON }]
}
transition on LPAREN to state [83]
transition on actuals to state [82]

-------------------
lalr_state [82]: {
  [expr_aux ::= LINENO STATIC_DISPATCH expr ID ID actuals (*) , {COLON }]
}

-------------------
lalr_state [83]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr_list ::= (*) expr , {RPAREN LINENO }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {RPAREN LINENO }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [actuals ::= LPAREN (*) RPAREN , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_list ::= (*) expr_list expr , {RPAREN LINENO }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [actuals ::= LPAREN (*) expr_list RPAREN , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {RPAREN LINENO }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr to state [58]
transition on expr_aux to state [29]
transition on expr_list to state [85]
transition on LINENO to state [27]
transition on RPAREN to state [84]

-------------------
lalr_state [84]: {
  [actuals ::= LPAREN RPAREN (*) , {COLON }]
}

-------------------
lalr_state [85]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {RPAREN LINENO }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_list ::= expr_list (*) expr , {RPAREN LINENO }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [actuals ::= LPAREN expr_list (*) RPAREN , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {RPAREN LINENO }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [59]
transition on LINENO to state [27]
transition on RPAREN to state [86]

-------------------
lalr_state [86]: {
  [actuals ::= LPAREN expr_list RPAREN (*) , {COLON }]
}

-------------------
lalr_state [87]: {
  [expr_aux ::= LINENO DISPATCH expr (*) ID actuals , {COLON }]
}
transition on ID to state [88]

-------------------
lalr_state [88]: {
  [actuals ::= (*) LPAREN RPAREN , {COLON }]
  [actuals ::= (*) LPAREN expr_list RPAREN , {COLON }]
  [expr_aux ::= LINENO DISPATCH expr ID (*) actuals , {COLON }]
}
transition on LPAREN to state [83]
transition on actuals to state [89]

-------------------
lalr_state [89]: {
  [expr_aux ::= LINENO DISPATCH expr ID actuals (*) , {COLON }]
}

-------------------
lalr_state [90]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {COLON }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr_aux ::= LINENO DIVIDE expr (*) expr , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {COLON }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [91]
transition on LINENO to state [27]

-------------------
lalr_state [91]: {
  [expr_aux ::= LINENO DIVIDE expr expr (*) , {COLON }]
}

-------------------
lalr_state [92]: {
  [simple_case ::= (*) LINENO BRANCH ID ID expr , {COLON LINENO }]
  [expr_aux ::= LINENO TYPCASE expr (*) case_list , {COLON }]
  [case_list ::= (*) case_list simple_case , {COLON LINENO }]
  [case_list ::= (*) simple_case , {COLON LINENO }]
}
transition on simple_case to state [95]
transition on LINENO to state [94]
transition on case_list to state [93]

-------------------
lalr_state [93]: {
  [simple_case ::= (*) LINENO BRANCH ID ID expr , {COLON LINENO }]
  [expr_aux ::= LINENO TYPCASE expr case_list (*) , {COLON }]
  [case_list ::= case_list (*) simple_case , {COLON LINENO }]
}
transition on simple_case to state [100]
transition on LINENO to state [94]

-------------------
lalr_state [94]: {
  [simple_case ::= LINENO (*) BRANCH ID ID expr , {COLON LINENO }]
}
transition on BRANCH to state [96]

-------------------
lalr_state [95]: {
  [case_list ::= simple_case (*) , {COLON LINENO }]
}

-------------------
lalr_state [96]: {
  [simple_case ::= LINENO BRANCH (*) ID ID expr , {COLON LINENO }]
}
transition on ID to state [97]

-------------------
lalr_state [97]: {
  [simple_case ::= LINENO BRANCH ID (*) ID expr , {COLON LINENO }]
}
transition on ID to state [98]

-------------------
lalr_state [98]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {COLON LINENO }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [simple_case ::= LINENO BRANCH ID ID (*) expr , {COLON LINENO }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {COLON LINENO }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [99]
transition on LINENO to state [27]

-------------------
lalr_state [99]: {
  [simple_case ::= LINENO BRANCH ID ID expr (*) , {COLON LINENO }]
}

-------------------
lalr_state [100]: {
  [case_list ::= case_list simple_case (*) , {COLON LINENO }]
}

-------------------
lalr_state [101]: {
  [expr_aux ::= LINENO OBJECT ID (*) , {COLON }]
}

-------------------
lalr_state [102]: {
  [expr_aux ::= LINENO SUB expr (*) expr , {COLON }]
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {COLON }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {COLON }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr to state [103]
transition on expr_aux to state [29]
transition on LINENO to state [27]

-------------------
lalr_state [103]: {
  [expr_aux ::= LINENO SUB expr expr (*) , {COLON }]
}

-------------------
lalr_state [104]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr_aux ::= LINENO LOOP expr (*) expr , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {COLON }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {COLON }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr to state [105]
transition on expr_aux to state [29]
transition on LINENO to state [27]

-------------------
lalr_state [105]: {
  [expr_aux ::= LINENO LOOP expr expr (*) , {COLON }]
}

-------------------
lalr_state [106]: {
  [expr_aux ::= LINENO COMP expr (*) , {COLON }]
}

-------------------
lalr_state [107]: {
  [expr_aux ::= LINENO INT INT_CONST (*) , {COLON }]
}

-------------------
lalr_state [108]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {COLON }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= LINENO PLUS expr (*) expr , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {COLON }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [109]
transition on LINENO to state [27]

-------------------
lalr_state [109]: {
  [expr_aux ::= LINENO PLUS expr expr (*) , {COLON }]
}

-------------------
lalr_state [110]: {
  [expr_aux ::= LINENO NEG expr (*) , {COLON }]
}

-------------------
lalr_state [111]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {COLON }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= LINENO LT expr (*) expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {COLON }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [112]
transition on LINENO to state [27]

-------------------
lalr_state [112]: {
  [expr_aux ::= LINENO LT expr expr (*) , {COLON }]
}

-------------------
lalr_state [113]: {
  [formal_list ::= formal_list formal (*) , {ID LINENO }]
}

-------------------
lalr_state [114]: {
  [feature ::= LINENO ATTR ID (*) ID expr , {RPAREN LINENO }]
}
transition on ID to state [115]

-------------------
lalr_state [115]: {
  [expr_aux ::= (*) LINENO STATIC_DISPATCH expr ID ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO LET ID ID expr expr , {COLON }]
  [expr_aux ::= (*) LINENO SUB expr expr , {COLON }]
  [expr_aux ::= (*) LINENO EQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO BOOL INT_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON NO_TYPE , {RPAREN LINENO }]
  [expr_aux ::= (*) LINENO LOOP expr expr , {COLON }]
  [expr_aux ::= (*) LINENO ISVOID expr , {COLON }]
  [expr_aux ::= (*) LINENO NEG expr , {COLON }]
  [feature ::= LINENO ATTR ID ID (*) expr , {RPAREN LINENO }]
  [expr_aux ::= (*) LINENO INT INT_CONST , {COLON }]
  [expr_aux ::= (*) LINENO DISPATCH expr ID actuals , {COLON }]
  [expr_aux ::= (*) LINENO TYPCASE expr case_list , {COLON }]
  [expr_aux ::= (*) LINENO MUL expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LEQ expr expr , {COLON }]
  [expr_aux ::= (*) LINENO OBJECT ID , {COLON }]
  [expr_aux ::= (*) LINENO ASSIGN ID expr , {COLON }]
  [expr_aux ::= (*) LINENO BLOCK expr_list , {COLON }]
  [expr_aux ::= (*) LINENO PLUS expr expr , {COLON }]
  [expr_aux ::= (*) LINENO LT expr expr , {COLON }]
  [expr_aux ::= (*) LINENO STR STR_CONST , {COLON }]
  [expr ::= (*) expr_aux COLON ID , {RPAREN LINENO }]
  [expr_aux ::= (*) LINENO COND expr expr expr , {COLON }]
  [expr_aux ::= (*) LINENO NEW ID , {COLON }]
  [expr_aux ::= (*) LINENO DIVIDE expr expr , {COLON }]
  [expr_aux ::= (*) LINENO COMP expr , {COLON }]
  [expr_aux ::= (*) LINENO NO_EXPR , {COLON }]
}
transition on expr_aux to state [29]
transition on expr to state [116]
transition on LINENO to state [27]

-------------------
lalr_state [116]: {
  [feature ::= LINENO ATTR ID ID expr (*) , {RPAREN LINENO }]
}

-------------------
lalr_state [117]: {
  [feature_list ::= feature_list feature (*) , {RPAREN LINENO }]
}

-------------------
lalr_state [118]: {
  [class ::= LINENO CLASS ID ID STR_CONST LPAREN optional_feature_list RPAREN (*) , {EOF LINENO }]
}

-------------------
lalr_state [119]: {
  [class_list ::= class_list class (*) , {EOF LINENO }]
}

-------------------
lalr_state [120]: {
  [$START ::= program EOF (*) , {EOF }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 0:REDUCE(with prod 2)] [term 39:SHIFT(to state 2)]
From state #1
 [term 0:SHIFT(to state 120)]
From state #2
 [term 2:SHIFT(to state 3)]
From state #3
 [term 39:SHIFT(to state 6)]
From state #4
 [term 0:REDUCE(with prod 0)] [term 39:SHIFT(to state 6)]
From state #5
 [term 0:REDUCE(with prod 3)] [term 39:REDUCE(with prod 3)]
From state #6
 [term 3:SHIFT(to state 7)]
From state #7
 [term 38:SHIFT(to state 8)]
From state #8
 [term 38:SHIFT(to state 9)]
From state #9
 [term 36:SHIFT(to state 10)]
From state #10
 [term 11:SHIFT(to state 11)]
From state #11
 [term 12:REDUCE(with prod 6)] [term 39:SHIFT(to state 15)]
From state #12
 [term 12:REDUCE(with prod 8)] [term 39:REDUCE(with prod 8)]
From state #13
 [term 12:SHIFT(to state 118)]
From state #14
 [term 12:REDUCE(with prod 7)] [term 39:SHIFT(to state 15)]
From state #15
 [term 4:SHIFT(to state 17)] [term 5:SHIFT(to state 16)]
From state #16
 [term 38:SHIFT(to state 114)]
From state #17
 [term 38:SHIFT(to state 18)]
From state #18
 [term 38:REDUCE(with prod 12)] [term 39:SHIFT(to state 22)]
From state #19
 [term 38:REDUCE(with prod 13)] [term 39:SHIFT(to state 22)]
From state #20
 [term 38:REDUCE(with prod 14)] [term 39:REDUCE(with prod 14)]
From state #21
 [term 38:SHIFT(to state 26)]
From state #22
 [term 6:SHIFT(to state 23)]
From state #23
 [term 38:SHIFT(to state 24)]
From state #24
 [term 38:SHIFT(to state 25)]
From state #25
 [term 38:REDUCE(with prod 16)] [term 39:REDUCE(with prod 16)]
From state #26
 [term 39:SHIFT(to state 27)]
From state #27
 [term 8:SHIFT(to state 48)] [term 9:SHIFT(to state 45)]
 [term 10:SHIFT(to state 44)] [term 14:SHIFT(to state 51)]
 [term 15:SHIFT(to state 38)] [term 16:SHIFT(to state 41)]
 [term 17:SHIFT(to state 56)] [term 18:SHIFT(to state 46)]
 [term 19:SHIFT(to state 35)] [term 20:SHIFT(to state 39)]
 [term 21:SHIFT(to state 55)] [term 22:SHIFT(to state 43)]
 [term 23:SHIFT(to state 34)] [term 24:SHIFT(to state 33)]
 [term 25:SHIFT(to state 49)] [term 26:SHIFT(to state 52)]
 [term 27:SHIFT(to state 37)] [term 28:SHIFT(to state 36)]
 [term 29:SHIFT(to state 47)] [term 30:SHIFT(to state 53)]
 [term 31:SHIFT(to state 50)] [term 32:SHIFT(to state 54)]
 [term 33:SHIFT(to state 42)] [term 34:SHIFT(to state 40)]
From state #28
 [term 12:REDUCE(with prod 10)] [term 39:REDUCE(with prod 10)]
From state #29
 [term 13:SHIFT(to state 30)]
From state #30
 [term 35:SHIFT(to state 32)] [term 38:SHIFT(to state 31)]
From state #31
 [term 12:REDUCE(with prod 17)] [term 13:REDUCE(with prod 17)]
 [term 38:REDUCE(with prod 17)] [term 39:REDUCE(with prod 17)]
From state #32
 [term 12:REDUCE(with prod 18)] [term 13:REDUCE(with prod 18)]
 [term 38:REDUCE(with prod 18)] [term 39:REDUCE(with prod 18)]
From state #33
 [term 39:SHIFT(to state 27)]
From state #34
 [term 39:SHIFT(to state 27)]
From state #35
 [term 39:SHIFT(to state 27)]
From state #36
 [term 37:SHIFT(to state 107)]
From state #37
 [term 39:SHIFT(to state 27)]
From state #38
 [term 39:SHIFT(to state 27)]
From state #39
 [term 39:SHIFT(to state 27)]
From state #40
 [term 38:SHIFT(to state 101)]
From state #41
 [term 39:SHIFT(to state 27)]
From state #42
 [term 13:REDUCE(with prod 42)]
From state #43
 [term 39:SHIFT(to state 27)]
From state #44
 [term 39:SHIFT(to state 27)]
From state #45
 [term 39:SHIFT(to state 27)]
From state #46
 [term 38:SHIFT(to state 75)]
From state #47
 [term 36:SHIFT(to state 74)]
From state #48
 [term 38:SHIFT(to state 72)]
From state #49
 [term 39:SHIFT(to state 27)]
From state #50
 [term 38:SHIFT(to state 69)]
From state #51
 [term 39:SHIFT(to state 27)]
From state #52
 [term 39:SHIFT(to state 27)]
From state #53
 [term 37:SHIFT(to state 63)]
From state #54
 [term 39:SHIFT(to state 27)]
From state #55
 [term 39:SHIFT(to state 27)]
From state #56
 [term 39:SHIFT(to state 27)]
From state #57
 [term 13:REDUCE(with prod 24)] [term 39:SHIFT(to state 27)]
From state #58
 [term 12:REDUCE(with prod 45)] [term 13:REDUCE(with prod 45)]
 [term 39:REDUCE(with prod 45)]
From state #59
 [term 12:REDUCE(with prod 46)] [term 13:REDUCE(with prod 46)]
 [term 39:REDUCE(with prod 46)]
From state #60
 [term 39:SHIFT(to state 27)]
From state #61
 [term 13:REDUCE(with prod 31)]
From state #62
 [term 13:REDUCE(with prod 28)]
From state #63
 [term 13:REDUCE(with prod 40)]
From state #64
 [term 39:SHIFT(to state 27)]
From state #65
 [term 13:REDUCE(with prod 36)]
From state #66
 [term 39:SHIFT(to state 27)]
From state #67
 [term 39:SHIFT(to state 27)]
From state #68
 [term 13:REDUCE(with prod 22)]
From state #69
 [term 13:REDUCE(with prod 27)]
From state #70
 [term 39:SHIFT(to state 27)]
From state #71
 [term 13:REDUCE(with prod 35)]
From state #72
 [term 39:SHIFT(to state 27)]
From state #73
 [term 13:REDUCE(with prod 19)]
From state #74
 [term 13:REDUCE(with prod 39)]
From state #75
 [term 38:SHIFT(to state 76)]
From state #76
 [term 39:SHIFT(to state 27)]
From state #77
 [term 39:SHIFT(to state 27)]
From state #78
 [term 13:REDUCE(with prod 25)]
From state #79
 [term 38:SHIFT(to state 80)]
From state #80
 [term 38:SHIFT(to state 81)]
From state #81
 [term 11:SHIFT(to state 83)]
From state #82
 [term 13:REDUCE(with prod 20)]
From state #83
 [term 12:SHIFT(to state 84)] [term 39:SHIFT(to state 27)]
From state #84
 [term 13:REDUCE(with prod 43)]
From state #85
 [term 12:SHIFT(to state 86)] [term 39:SHIFT(to state 27)]
From state #86
 [term 13:REDUCE(with prod 44)]
From state #87
 [term 38:SHIFT(to state 88)]
From state #88
 [term 11:SHIFT(to state 83)]
From state #89
 [term 13:REDUCE(with prod 21)]
From state #90
 [term 39:SHIFT(to state 27)]
From state #91
 [term 13:REDUCE(with prod 32)]
From state #92
 [term 39:SHIFT(to state 94)]
From state #93
 [term 13:REDUCE(with prod 26)] [term 39:SHIFT(to state 94)]
From state #94
 [term 7:SHIFT(to state 96)]
From state #95
 [term 13:REDUCE(with prod 47)] [term 39:REDUCE(with prod 47)]
From state #96
 [term 38:SHIFT(to state 97)]
From state #97
 [term 38:SHIFT(to state 98)]
From state #98
 [term 39:SHIFT(to state 27)]
From state #99
 [term 13:REDUCE(with prod 49)] [term 39:REDUCE(with prod 49)]
From state #100
 [term 13:REDUCE(with prod 48)] [term 39:REDUCE(with prod 48)]
From state #101
 [term 13:REDUCE(with prod 41)]
From state #102
 [term 39:SHIFT(to state 27)]
From state #103
 [term 13:REDUCE(with prod 30)]
From state #104
 [term 39:SHIFT(to state 27)]
From state #105
 [term 13:REDUCE(with prod 23)]
From state #106
 [term 13:REDUCE(with prod 37)]
From state #107
 [term 13:REDUCE(with prod 38)]
From state #108
 [term 39:SHIFT(to state 27)]
From state #109
 [term 13:REDUCE(with prod 29)]
From state #110
 [term 13:REDUCE(with prod 33)]
From state #111
 [term 39:SHIFT(to state 27)]
From state #112
 [term 13:REDUCE(with prod 34)]
From state #113
 [term 38:REDUCE(with prod 15)] [term 39:REDUCE(with prod 15)]
From state #114
 [term 38:SHIFT(to state 115)]
From state #115
 [term 39:SHIFT(to state 27)]
From state #116
 [term 12:REDUCE(with prod 11)] [term 39:REDUCE(with prod 11)]
From state #117
 [term 12:REDUCE(with prod 9)] [term 39:REDUCE(with prod 9)]
From state #118
 [term 0:REDUCE(with prod 5)] [term 39:REDUCE(with prod 5)]
From state #119
 [term 0:REDUCE(with prod 4)] [term 39:REDUCE(with prod 4)]
From state #120
 [term 0:REDUCE(with prod 1)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 1]
From state #1
From state #2
From state #3
 [non term 1->state 4] [non term 2->state 5]
From state #4
 [non term 2->state 119]
From state #5
From state #6
From state #7
From state #8
From state #9
From state #10
From state #11
 [non term 3->state 14] [non term 4->state 13] [non term 5->state 12]
From state #12
From state #13
From state #14
 [non term 5->state 117]
From state #15
From state #16
From state #17
From state #18
 [non term 6->state 21] [non term 7->state 19] [non term 8->state 20]
From state #19
 [non term 8->state 113]
From state #20
From state #21
From state #22
From state #23
From state #24
From state #25
From state #26
 [non term 9->state 29] [non term 10->state 28]
From state #27
From state #28
From state #29
From state #30
From state #31
From state #32
From state #33
 [non term 9->state 29] [non term 10->state 111]
From state #34
 [non term 9->state 29] [non term 10->state 110]
From state #35
 [non term 9->state 29] [non term 10->state 108]
From state #36
From state #37
 [non term 9->state 29] [non term 10->state 106]
From state #38
 [non term 9->state 29] [non term 10->state 104]
From state #39
 [non term 9->state 29] [non term 10->state 102]
From state #40
From state #41
 [non term 9->state 29] [non term 10->state 92]
From state #42
From state #43
 [non term 9->state 29] [non term 10->state 90]
From state #44
 [non term 9->state 29] [non term 10->state 87]
From state #45
 [non term 9->state 29] [non term 10->state 79]
From state #46
From state #47
From state #48
From state #49
 [non term 9->state 29] [non term 10->state 70]
From state #50
From state #51
 [non term 9->state 29] [non term 10->state 66]
From state #52
 [non term 9->state 29] [non term 10->state 64]
From state #53
From state #54
 [non term 9->state 29] [non term 10->state 62]
From state #55
 [non term 9->state 29] [non term 10->state 60]
From state #56
 [non term 9->state 29] [non term 10->state 58] [non term 12->state 57]
From state #57
 [non term 9->state 29] [non term 10->state 59]
From state #58
From state #59
From state #60
 [non term 9->state 29] [non term 10->state 61]
From state #61
From state #62
From state #63
From state #64
 [non term 9->state 29] [non term 10->state 65]
From state #65
From state #66
 [non term 9->state 29] [non term 10->state 67]
From state #67
 [non term 9->state 29] [non term 10->state 68]
From state #68
From state #69
From state #70
 [non term 9->state 29] [non term 10->state 71]
From state #71
From state #72
 [non term 9->state 29] [non term 10->state 73]
From state #73
From state #74
From state #75
From state #76
 [non term 9->state 29] [non term 10->state 77]
From state #77
 [non term 9->state 29] [non term 10->state 78]
From state #78
From state #79
From state #80
From state #81
 [non term 11->state 82]
From state #82
From state #83
 [non term 9->state 29] [non term 10->state 58] [non term 12->state 85]
From state #84
From state #85
 [non term 9->state 29] [non term 10->state 59]
From state #86
From state #87
From state #88
 [non term 11->state 89]
From state #89
From state #90
 [non term 9->state 29] [non term 10->state 91]
From state #91
From state #92
 [non term 13->state 93] [non term 14->state 95]
From state #93
 [non term 14->state 100]
From state #94
From state #95
From state #96
From state #97
From state #98
 [non term 9->state 29] [non term 10->state 99]
From state #99
From state #100
From state #101
From state #102
 [non term 9->state 29] [non term 10->state 103]
From state #103
From state #104
 [non term 9->state 29] [non term 10->state 105]
From state #105
From state #106
From state #107
From state #108
 [non term 9->state 29] [non term 10->state 109]
From state #109
From state #110
From state #111
 [non term 9->state 29] [non term 10->state 112]
From state #112
From state #113
From state #114
From state #115
 [non term 9->state 29] [non term 10->state 116]
From state #116
From state #117
From state #118
From state #119
From state #120
-----------------------------
------- CUP v0.11a beta 20060608 Parser Generation Summary -------
  0 errors and 0 warnings
  40 terminals, 15 non-terminals, and 50 productions declared, 
  producing 121 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "ASTParser.java", and "ASTConstants.java".
---------------------------------------------------- (v0.11a beta 20060608)
