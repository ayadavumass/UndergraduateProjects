(*
   This file should be compiled together with atoi.cl.

   The Stack class implements the standard stack operations.
   For convenience, methods that perform multiple pops are also defined.
   A value of class Stack serves as the empty stack; non-empty
   stacks are built using the classes that inherit from Stack.

   The other methods are:
	show() : Display the stack.  Nothing to do for the empty stack.
	eval() : Evaluate the top of the stack.  Noop for the empty stack.
	doit() : Perform the operation on top of the stack.  A Noop
		 for the empty stack and for all other operations except
		 "e" and "d".
	setval()
        getval() : set and get the integer value on the top of the stack.
		 An error for all classes except the I class.

*)
class Stack inherits IO is

    rest : Stack;
    
    push(r : Stack) : Stack is
      begin
	rest <- r;
	self;
      end
    end;

    pop()  : Stack is rest end;
    pop2() : Stack is pop().pop() end;
    pop3() : Stack is pop().pop().pop() end;

    show() : Stack is self end;
    eval() : Stack is self end;
    doit() : Stack is self end;

    setval(i : Int) : Stack is
	begin
	    out_string("No setval method for object on stack.\n");
	    abort();
	    self;
	end
    end;

    getval() : Int is
	begin
	    out_string("No getval method for object on stack.\n");
	    abort();
	    0;
	end
    end;
end;


(* 
   The Stack class is inherited by several classes, one for each kind
   of entity that can appear on the stack.  Each of these classes
   overrides some of the methods of Stack with methods appropriate to
   that class.

   The I (integer) class holds an integer on the stack.  This is the only
   class with interesting setval and getval methods.
*)
class I inherits Stack is

    val : Int;

    setval(i : Int) : Stack is begin val <- i; self; end end;

    getval() : Int is val end;

    show() : Stack is
	begin
	    out_int(val);
            out_string("\n");
	    rest.show();
	    self;
	end
    end;
end;

(*
  The A class (for "add" or "+") defines the eval method to add the top
  two elements of the stack and push the result (which must be an I)
  back on the stack.
*)
class A inherits Stack is

    eval() : Stack is 
     (new I).setval(pop().getval() + pop2().getval()).push(pop3()) 
    end;

    show() : Stack is
	begin
	   out_string("+\n");
	   rest.show();
	   self;
        end
    end; 
end;


(*
  The S class (for "swap") defines the eval method to swap the top two
  elements of the stack.
*)
class S inherits Stack is

    eval() : Stack is
        let first : Stack <- pop() in
           let second : Stack <- pop2() in
		let rest : Stack <- pop3() in
			second.push(first.push(rest))
		end
	   end
	end
    end;

    show() : Stack is
        begin
           out_string("s\n");
	   rest.show();
	   self;
        end
    end;
end;

(*
   The E class (for "evaluate") overrides the doit() method to cause evaluation
   of the item below "e" on the stack.
*)
class E inherits Stack is
    doit() : Stack is pop().eval() end;
end;

(*
    The D class (for "display") overrides the doit() method to print the stack
    below the "d".
*)
class D inherits Stack is
    doit() : Stack is pop().show() end;
end;


class Main inherits IO is

   stack : Stack <- new Stack; 

(* Need a value of type A2I to use the methods in that class. *)
   dummy : A2I <- new A2I;

   s : String;

   prompt() : String is 
	begin
	    out_string(">");
	    in_string();
        end
   end;

(*
   Repeatedly prompt for and read a command.  Push the command on the stack,
converting it to an integer if necessary.  Finally, invoke the doit() function
of the class on the top of the stack.
*)
   main() : Object is
     while not ((s <- prompt()) = "x") 
      loop
	    stack <- if s = "+" then (new A) else
                     if s = "s" then (new S) else
                     if s = "d" then (new D) else
                     if s = "e" then (new E) else
                        (new I).setval(dummy.a2i(s))
	             fi fi fi fi 
                     .push(stack).doit()
      pool
    end;
end;
