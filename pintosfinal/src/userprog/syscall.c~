#include "userprog/syscall.h"
#include <stdio.h>
#include <syscall-nr.h>
#include "threads/interrupt.h"
#include "threads/thread.h"
#include "vm/page.h"
#include "vm/memoryMap.h"
#include "userprog/gdt.h"
#include "threads/interrupt.h"
#include "threads/thread.h"
#include "threads/vaddr.h"
#include "vm/memoryMap.h"
#include "vm/swap.h"
#include "vm/frame.h"


#define PGSIZE 4096
#define EXIT_SUCCESS 0
#define PHYS_BASE 0xc0000000



static void syscall_handler (struct intr_frame *);

static int
get_user (const uint8_t *uaddr)
{
kernel_Fault_Type = 0; 
int result;
asm ("movl $1f, %0; movzbl %1, %0; 1:"
: "=&a" (result) : "m" (*uaddr));
return result;
}

static bool
put_user (uint8_t *udst, uint8_t byte)
{
int error_code;
asm ("movl $1f, %0; movb %b2, %1; 1:"
: "=&a" (error_code), "=m" (*udst) : "q" (byte));
return error_code != -1;
}


void
syscall_init (void) 
{
  intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
}

static void
syscall_handler (struct intr_frame *f UNUSED) 
{
  struct FileMap *fMap;
  struct file *filePointer;
  int retStatus, fileDescriptor, childPid,  retVal ; 
  unsigned sizeOfBuffer ;
  void *buffer ;
  void *userStack = f->esp ;
  if(userStack > PHYS_BASE - 5)
{
  thread_current()->set_status=-1;
		//freeResource(thread_current());
		thread_exit();//we need to free the thread's resources before exiting it.
} 
 if(get_user(userStack)==-1)
	{
		thread_current()->set_status=-1;
		//freeResource(thread_current());
		thread_exit();
	}
  int systemCallNumber = *((int *)userStack);
  #ifdef testing
  printf("systemCallNumber = %d\n",systemCallNumber);
  #endif	
  switch(systemCallNumber)
  {
   case SYS_HALT:
   break;
   case SYS_EXIT:
//printf("asd\n");
  // printf("list %d\n",list_size(&thread_current()->descriptor_table));
   userStack = userStack + sizeof(int) ;
   retStatus = *(int *)userStack ;
   //IF PARENT WAITS ON IT THEN THE CHILD HAS TO RETURN THE retStatus to the parent -- ??
   if(retStatus == EXIT_SUCCESS);	 	
   #ifdef testing
   printf("exiting successfully\n");
   #endif
   
   thread_current()->set_status=retStatus;
/**/
//freeResource(thread_current());
/**/		
   //freeResource(thread_current());
   thread_exit();
   
   
   break;
   case SYS_WRITE:   
   #ifdef testing
   printf("in system write\n");
   #endif	

   userStack = userStack + sizeof(int);
   fileDescriptor = *(int *)userStack ;
   userStack = userStack + sizeof(void *);
   
   buffer = *(void **)userStack ;
   userStack = userStack + sizeof(unsigned);
   sizeOfBuffer = *(int *)userStack ;
  
   if(sizeOfBuffer == 0)
   {    
     f->eax = 0;
     return;
   }
   if(get_user(buffer) == -1 || fileDescriptor == 0)
   {
    thread_current()->set_status= - 1;	
	// freeResource(thread_current());
 	 thread_exit();
   }
   if(fileDescriptor == 1)
   putbuf(buffer, sizeOfBuffer);
   else
   {  

   filePointer = getFilePointerFromDescriptorTable(fileDescriptor); 

    if(filePointer == NULL)
   {
    thread_current()->set_status= - 1;
	// freeResource(thread_current());	
 	 thread_exit();
   }



    retVal = file_write (filePointer, buffer, sizeOfBuffer) ;
    //printf("retval is %d, sizeOfBuffer %d\n",retVal, sizeOfBuffer);
   }
    #ifdef testing
    printf("size %u\n",sizeOfBuffer);			
    printf("%s",(char *)buffer);	
    printf("fileDescriptor %d\n",fileDescriptor);	
   #endif	
    f->eax = retVal ;
   

   break;

   case SYS_WAIT:
   userStack = userStack + sizeof(int);
   childPid = *(int *)userStack ; 
   f->eax =  process_wait(childPid);
  // Check if the process with ID = pid is still alive -- wait if it is alive
  // if the child process terminated but did not call exit return -1 
   break; 

   case SYS_EXEC:
   userStack = userStack + sizeof(char *);
   char *executableFileName = *(char **)userStack ;
//printf("%d\n",get_user(executableFileName));
     if(get_user(executableFileName) == -1)
    {
     return ;
     }
 // printf ("exec file name is %s\n",executableFileName);
 /*struct file *fileP1 = filesys_open(executableFileName);
   if(fileP1 == NULL) 
  {
   printf("sad");
   f->eax = -1;
    return ;
   }
printf("here");
   //file_close(executableFileName);*/
   int childTid = process_execute(executableFileName);
   
   if(childTid == -1)  
	{
		//printf("child tid -1 \n");	
		f->eax = -1 ;
	}
   else f->eax =  childTid ;
   break;

   case SYS_OPEN:
   userStack = userStack + sizeof(char *);
   char *fileName = *(char **)userStack ;

   if(get_user(fileName) == -1  ||    (fileName >= PHYS_BASE))
   {
	 thread_current()->set_status = - 1;
         thread_exit();	
 	 return;
    }

   struct file *fileP = filesys_open(fileName);
   if(fileP == NULL) 
  {
   //printf("sad");
   f->eax = -1;
//  thread_exit();	
   return ;
   }
   struct descriptorMap *desMap = malloc(sizeof(struct descriptorMap));
   int descriptorNumber = ++(thread_current()->availableDescriptor) ;
   desMap->fd = descriptorNumber;
   desMap->fileName = fileP ;
   list_push_front(&(thread_current()->descriptor_table), &(desMap->elem));
   f->eax = descriptorNumber ;
   break;

  case SYS_CREATE:
// printf("hi\n");
   userStack = userStack + sizeof(char *);
   fileName = *(char **)userStack ;
  // printf("%s\n",fileName);
	if((fileName) == NULL)
   {
 	thread_current()->set_status= - 1;	
 	 thread_exit();
   }
   userStack = userStack + sizeof(unsigned);
   unsigned fileSize = *(unsigned *)userStack ;
   if(get_user(fileName) == -1)
   {
 	thread_current()->set_status= - 1;	
 	 thread_exit();
   }
   bool retValue = filesys_create (fileName, fileSize);

   f->eax = retValue ;
  break ;

 case SYS_READ:
 retVal = 0 ;
 userStack = userStack + sizeof(int);
 fileDescriptor = *(int *)userStack ;
 userStack = userStack + sizeof(void *);
 buffer = *(void **)userStack ;
 userStack = userStack + sizeof(unsigned);
 sizeOfBuffer = *(int *)userStack ;
 if(sizeOfBuffer != 0)
 {
 //printf("sizeofbuffer = %d\n",sizeOfBuffer);
 if(buffer >= PHYS_BASE)
 {
	
    thread_current()->set_status = -1;	
   // freeResource(thread_current());
    thread_exit();
  }
 else
 {
 filePointer = getFilePointerFromDescriptorTable(fileDescriptor); 
 if(filePointer == NULL)
   {
    thread_current()->set_status = -1;	
    //freeResource(thread_current());
    thread_exit();
   }
if(get_user(buffer)==-1)
{
thread_current()->set_status = -1;	
    //freeResource(thread_current());
    thread_exit();
	
}

 retVal = file_read (filePointer, buffer, sizeOfBuffer) ;

if(retVal!=sizeOfBuffer)
{
thread_current()->set_status = -1;	
    //freeResource(thread_current());
    thread_exit();
	
}

 
  }
 }
 f->eax = retVal ;
 break;

 case SYS_CLOSE:
 userStack = userStack + sizeof(int);
 fileDescriptor = *(int *)userStack ;
 if(fileDescriptor == 0  || fileDescriptor == 1)
 { 
    thread_current()->set_status = -1;	
   // freeResource(thread_current());
    thread_exit();	
      //NOT IMPLEMENTED THE CASE FOR STDIN AND STDOUT
  }
 filePointer = removeFilePointerFromDescriptorTable(fileDescriptor); 
 if(filePointer == NULL)
   {
    thread_current()->set_status = -1;
  //  freeResource(thread_current());	
    thread_exit();
   }
 file_close(filePointer);
 break;

 case SYS_FILESIZE:
 userStack = userStack + sizeof(int);
 fileDescriptor = *(int *)userStack ;
 filePointer = getFilePointerFromDescriptorTable(fileDescriptor); 
 if(filePointer == NULL)
   {
    thread_current()->set_status = -1;	
  //  freeResource(thread_current());
    thread_exit();
   }
 f->eax = file_length(filePointer);
  break;
 
 case SYS_SEEK:
  userStack = userStack + sizeof(int);
 fileDescriptor = *(int *)userStack ;
 userStack = userStack + sizeof(unsigned);
 unsigned position = *(unsigned *)userStack ;
 filePointer = getFilePointerFromDescriptorTable(fileDescriptor); 
 if(filePointer == NULL)
   {
    thread_current()->set_status = -1;
   // freeResource(thread_current());	
    thread_exit();
   } 
 file_seek(filePointer,position );
 break; 

/* Implementation Of Memory Map System Call */
  case SYS_MMAP:
  userStack = userStack + sizeof(int);
  fileDescriptor = *(int *)userStack ;
  userStack = userStack + sizeof(void *);
  buffer = *(void **)userStack ;
  if(buffer!=pg_round_down(buffer))
	{
		f->eax=-1;
		return;
	}
  if((buffer>=0x8048000 && buffer <=0x807ad24)||(buffer>=(PHYS_BASE - PGSIZE)&&buffer<=PHYS_BASE)|| buffer==NULL)
	{
		f->eax=-1;
		return;
	}
  
  struct thread *currentThread = thread_current();
  fMap = malloc(sizeof (struct FileMap));
  fMap->fileVirtualAddress = buffer ;
  
  fMap->fileDescriptor = fileDescriptor ;
  filePointer = getFilePointerFromDescriptorTable(fileDescriptor);
  if(filePointer==NULL)
	{
		f->eax = -1 ;
		return;
	} 
 int length = file_length(filePointer);
  fMap->fileLength=length;
  void *upage = pg_round_down(buffer);
  int Offset =  filePointer->pos ;

  size_t read_bytes = length ;
  size_t zero_bytes = (4096 - (read_bytes % 4096 ))%4096;

  if(!Overlap_Check(read_bytes,zero_bytes,upage))
	{
		f->eax=-1;
		return;
	}
  hash_insert(&(currentThread->memoryMapTable), &(fMap->hash_elem)); 


 
  while (read_bytes > 0 || zero_bytes > 0) 
    {
      /* Calculate how to fill this page.
         We will read PAGE_READ_BYTES bytes from FILE
         and zero the final PAGE_ZERO_BYTES bytes. */
   size_t    page_read_bytes = read_bytes < PGSIZE ? read_bytes : PGSIZE;
   size_t     page_zero_bytes = PGSIZE - page_read_bytes;

      /* Updating the S-Page Table. */
                struct SuppPageTable *HashStruct = malloc(sizeof(struct SuppPageTable));
	       	HashStruct->UserPage_VAddr = upage;
		(HashStruct->File_Info).file = filePointer;
		(HashStruct->File_Info).Actual_Offset = Offset ;
		(HashStruct->File_Info).page_read_bytes = page_read_bytes ;
		(HashStruct->File_Info).page_zero_bytes = page_zero_bytes ;
		(HashStruct->File_Info).writable = true ;		 //writable;
		HashStruct->isSwap=true;
	//printf("swapTable lock acquire %d \n",thread_current()->tid);	
	
		lock_acquire(&frame_lock);
//printf("swapTable lock %d \n",thread_current()->tid);
                  
		hash_insert(&(thread_current()->Supp_Page_Table), &(HashStruct->hash_elem));
		File_Write_Swap(filePointer,Offset,page_read_bytes,page_zero_bytes,HashStruct);
		lock_release(&frame_lock);
	
//printf("swapTable lock release %d \n",thread_current()->tid);
		
	
	
      read_bytes -= page_read_bytes;
      zero_bytes -= page_zero_bytes;
      upage += PGSIZE;
      Offset += PGSIZE;
    }
  f->eax = fileDescriptor ; // Using File Descriptor itself as Map Id.
  
  break;

  case SYS_MUNMAP:
  userStack = userStack + sizeof(int);
  fileDescriptor = *(int *)userStack ;
  fMap = malloc(sizeof (struct FileMap));
  fMap->fileDescriptor = fileDescriptor ;
  struct hash_elem *elem;  
  elem = hash_delete(&(thread_current()->memoryMapTable), &(fMap->hash_elem));
  struct FileMap *fileMap = hash_entry (elem, struct FileMap, hash_elem);
  void *fileVirtualAddress = fileMap->fileVirtualAddress ;
  filePointer = getFilePointerFromDescriptorTable(fileDescriptor);
  /* we need to remove the  entries from the page table. */
 
	
  int fileLength = fileMap->fileLength;
  fileVirtualAddress = pg_round_down(fileVirtualAddress);
  upage=fileVirtualAddress;
  read_bytes = fileLength ;
  zero_bytes = (4096 - (read_bytes % 4096 ))%4096;
  while (read_bytes > 0 || zero_bytes > 0) 
    {
      /* Calculate how to fill this page.
         We will read PAGE_READ_BYTES bytes from FILE
         and zero the final PAGE_ZERO_BYTES bytes. */
   		size_t    page_read_bytes = read_bytes < PGSIZE ? read_bytes : PGSIZE;
   		size_t     page_zero_bytes = PGSIZE - page_read_bytes;

      /* Updating the S-Page Table. */
                struct SuppPageTable *HashStruct =page_lookup (upage,&(thread_current()->Supp_Page_Table));
		
		if(pagedir_is_dirty(thread_current()->pagedir,upage)&&filePointer!=NULL)
		{


			file_write_at(filePointer,pagedir_get_page(thread_current()->pagedir,upage),page_read_bytes,(HashStruct->File_Info).Actual_Offset);



		}
		hash_delete(&(thread_current()->Supp_Page_Table), &(HashStruct->hash_elem));
		pagedir_clear_page (thread_current()->pagedir, upage);
		read_bytes -= page_read_bytes;
      		zero_bytes -= page_zero_bytes;
      		upage += PGSIZE;
      		Offset += PGSIZE;
    }
  /**/
  case SYS_REMOVE:
   userStack = userStack + sizeof(char *);
   fileName = *(char **)userStack ;
  // printf("%s\n",fileName);
	if((fileName) == NULL)
   {
 	thread_current()->set_status= - 1;	
 	thread_exit();
   }
   
   if(get_user(fileName) == -1)
   {
 	thread_current()->set_status= - 1;	
 	 thread_exit();
   }
   retValue = filesys_remove (fileName);

   f->eax = retValue ;
   break;
/**/
 default:;
		
  }		

}

/* Method to free pages of a given file-desriptor from the main-memory */
void freeFilePages(int fileDescriptor)
{
struct hash_iterator i;
struct FileMap *f ;
hash_first (&i, &(thread_current()->memoryMapTable));
bool Last = 0 ; 
while (hash_next (&i))
{
	if(Last == 1)
		{
			free(f->fileVirtualAddress);	//Removing the file from the virtual memory.
			free(f);
			Last = 0;
		}
	f = hash_entry (hash_cur (&i), struct FileMap, hash_elem);
	if(f->fileDescriptor == fileDescriptor)
	{
	   //printf("hello\n");
	   Last = 1;	
	   hash_delete(&(thread_current()->memoryMapTable), &(f->hash_elem));
	 // removes the hash_elem for the file from the Memory Map Table
	   	
	}
}

if(Last == 1)
		{
			free(f->fileVirtualAddress);	//Removing the file from the virtual memory.
			free(f);
			Last = 0;
		}

}
